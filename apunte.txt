PRACTICAS

	# filosofia movil first y responsive desing
	# html5 boilerplate mejores practicas

	# en "css orientado a objetos", reservar los id para javascript en css utilizar clases para tratar a cada elemento como un objeto

	# cuando la imagen no es parte del contenido cargar las imagenes por css

	# mantener solo un header, un nav y un h1 por pagina

	#utilizar margenes en relacional tamaño de la fuente (em)

	agregar a las imagenes un vertical-align top

	utilizar display block para los saltos de linea
HTML----------
HEAD
	dependencia al responsive design
	<meta name="viewport" content="width=device-width, initial-scale=1 maximum-scale=1>
	initial-scale full por defecto
	maximum-scale limita el zoom

	todo el css igual en todos los navegadores
	(no utilizar reset en css)
	<link rel="stylesheet" href="css/normalize.css"> 

	libreria js para hacer que todo lo de html5 funcione bien en navegadores
	<script src="js/vendor/modernizr-2.6.2.min.js"></script>

BODY
	todo el javascript antes de cerrar la etiqueta

ESTRUCTURA

	header
	nav -> botones de navegacion
	section -> todo el contenido
	article -> ultimo item dentro de un sistema semantico
	footer
	figure -> imagenes

CSS
	#margin <arriba> <derecha> <abajo> <izq>

	#padding <arriba/abajo> <lados>

	# border 1px dashed invert(color): el invert crea un objeto con el color mas contrastante del ingresado como parametro

	border 1px solid lighten(color, 40%) lighten() aclara un porcentaje del color entregado


	#text-shadow <desplazamiento en X> <desplazamiento en y> <difumina> <color sombra>

	#para los margenes considerar los pixeles de los divs anteriores sobre todo cuando hay un div flotando a la izq. ej. si tengo un div:float left; width 60px; para poner un margen al div contiguo es necesario sumar el width + el margen deseado  

	#border-radius 1em: bordes redondeados
	#border-radius 50%: imagen circular
	border-radius <sup-izq> <sup-der> <inf-izq> <inf-der>

	#DISPLAY:
		inline; si se ubica en un texto se posiciona normal dentro e el, se pueden mover dentro del div

		block; ocupa el maximo ancho del div, obliga a los objetos hacer un salto de linea, no pueden tener margin ni padding
		(transforma en cajas los objetos)

		inline-block; convierte cualquier caja u objeto con margin, padding pero no elimina las cosas de la derecha o que estan al lado de el

		#FLOAT: left; o right;
			(rompe las caracteristicas de campo de fuerza qe tienen los objetos, permite que el resto de los objetos rodee a otro.)

		#POSITION:
			(todos los objetos tienen por defecto una posicion static)

			relative; adquiere la capacidad de utilizar top left button y right, pero aun sigue empujando al resto de los objetos (mantiene su campo de fuerza)

			absolute; obtiene las mismas caracteristicas que relative, pero rompe su campo de fuerza y ubica su punto 0.0 en el body excepto si la caja a la que se le aplica esta dentro de un POSITION
			(busca el contenedor mas cercano que tenga relative y a partir de ese busca su punto 0.0)

		#Z-INDEX 0..n
			(permite crear capaz y superponerlas, requiere position: absolute o relative en las capaz superiores, 0 es la capa mas al interior)

		#OVERFLOW: hidden;  RECALCULA EL ALTO
				(obliga al objeto a esconder lo que se sale, recalcula el alto incluyendo a los objetos que se salen)

		#OVERFLOW-X auto;(horizontal)
				(ajusta el objeto y crea un scroll si es mas grande que el ancho de la pagina)

		#WHITE_SPACE nowrap
			(mata la propiedad de salto de linea de los textos contenidos en un objeto)

		#BOX-SHADOW <x> <y> <difuminacion> <color>
			sombra para las cajas

		#HOVER (div:hover)
			aplica estilos encima de un objeto al posicionarse con el mouse

		#BEFORE (div:before)
			se puede agregar contenido "content: '---'" al inicio de un div y antes del contenido propio
			(no se muestra al inspeccionar elemento)

		#AFTER (div:after)
			igual que before pero al terminar en contenido interior del div
			(no se muestra al inspeccionar elemento)

		#CONTENT
			sirve para agregar contenido al div que es propio del diseño y no interfiere directamente en la app, solo funciona dentro de after y before
		
		#&:nth-child(even) puede diferenciar objetos entre pares(even) e impares(odd) por ejemplo

		#&::  acceder al shadow-dom


		#RESPONSIVE
			MEDIAQUERYS forma en css condicional para cambiar el diseño
			min-width: para mobile first
			max-width: para escritorio hacia movil

			cuando el medio sea menor a 768px conserve las condiciones actuales, si es mayor haga lo siguiente
			@media screen and (min-width: 768px)


APUNTE

	#instalar node.js y stylus

	#compilar stylus
	stylus prueba1.styl -c -w

	#los objetos que contienen texto (p,hn,ul-li) siempre tienen un margenes por defecto

	# por defecto recomendado para la web
	font-size 16px

	# para utilizar un padding qe dependa del tamaño de la fuente por defecto se utiliza como medida "em"

	#retina necesita el doble de pixeles para mostrar una imagen de buena calidad (prop 4:1) si tenemos una imagen de 100x100px hay qe exportarla a 200x200px,.png no tiene problemas de peso al redimencionar la imagen,
	en el caso de los jpg, uno de 100x100 a 90% de calidad pesa mas que uno de 200x200 a 50% y dentro de esos parametros no debiera producir problemas

	# en imagenes utilizar pixeles absolutos, para textos y otras cosas utilizar tamaños adaptables

	# se pueden agregar varias clases a un tag <div class="logo left">

	# utilizar display inline-block en los ul-li para mostrarlos de forma horizontal

	# bootstrap clases css predeterminadas para hacer ejemplos o ideas, sistema de grillas (grid system)

		por defecto utiliza normalize.css

		# crea columnas: div.row

		#las grillas tiene 4 tipos y estan compustas 12 columnas
		col-lg-3 (desktop - large): grilla grande para resoluciones de mas de 1200px

		col-md-3 (desktop - medium): grilla con hasta 980px

		col-sm-3 (tablet - small): grilla para tablets hasta 768px

		col-xs-3 (phone - extrasmall): para telefonos hasta 480px (con el 3 ocupa hasta 3 columnas de ancho)

		class="visible-(tamaño)" visibilidad dependiendo del tamaño de la resolucion

		class pull-right: alinea a la derecha

		class btn, btn-default: crea estilo botones

		class nav, nav-pills, nav-tabs: crean barras de navegacion con ul-li

		class="text-center" alinea el texto al centro


	TRUCO SUBLIME EMMET

	div.col*4>{columna $}	4 divs con clase col y valor interior columna + numero

	seleccionar algo y ctrl + d permite modificar todas las ocurrencias del objeto seleccionado

	el simbolo ^ permite salir del nivelsalir de nivel
	p>label>{Titulo}+^input

	agregar mas paramatros a los tags
	input[type=submit]
		

-------------------
JAVASCRIPT

	#debugear
	debugger;

	#crear variables (sitring con comillas)
	var a = 1

	#funcion que permite mandar info a la consola del navegador
	console.log(a)

	#FOR
		for (var i=0; i<10; i++){...};

	#IF
		if (true){...} else{...};

	#SWITCH
		switch(a){
			case a: ...; break;
			case b: ...; break;
			case c: ...; break;
			default: ...;
		}

	#FUNCIONES
		function hacerAlgo(params){...; return algo;}

		#llamar funcion
		hacerAlgo();

		#recibir valor retornado
		var a = hacerAlgo();

	#ESTRUCTURAS DE DATOS
		#arrays
			var tiempo = [v1,v2,v3];
			------- == ------
			var tiempo = [];
			tiempo.push(v1);
			tiempo.push(v2);
			tiempo.push(v3);

		#todo en js es un objeto
		#objetos (puede contener objetos)
			var persona = {
			nombre: "bdoP",
			edad: 234,
			pais: "cl"
			};
			------- == ------
			var persona = {};
			persona.nombre = "bdo"
			persona.edad = 123
			persona.pais = "cl"



	EVENTOS
	#carga eventos cuando termina de cargar la pagina
	$(window).on('load', darBienvenida)

	#se dispara cuando se carga el dom
	$(document).on('ready', function(){
		...todo...
	});

	
	JQUERY

	#busca en los elementos que estan al mismo nivel del objeto entregado
	$(elem).sibligs('.up')

	#cuando no se asigna un documento jquery asume que es el document object y el evento ready
	$(function(){ ... });

	#asigna una funcion a una clase del html al hacer click sobre ella
	$('.publicar').on('click', darBienvenida);

	#saca el evento click
	$('.publicar').off('click', darBienvenida);

	#manipular css desde js
	$('.form').css('display','block')

	#efecto para mostrar div oculto (desplazamiento hacia abajo)
	$('.form').slideDown();

	#efecto para mostrar y ocultar div co el mismo boton (desplazamiento hacia arriba/abajo)
	$('.form').slideToggle();

	#funcionamiento de un boton
	$('.form').on('submit', procesarForm);

	# a cualquier funcion que se le asigne un evento, el primer parametro que recibe esa funcion siempre sera el evento que se disparo y se puede capturar y procesar.
	function procesarForm(event){
		#no ejecuta la accion por defecto que el evento debiera realizar
		event.preventDefault();
	}

	#permite obtener el valor de un input sin id (sin .val() obtiene el objeto entero)
	var titulo = $('input[name=titulo]').val();

	#toma todos los valores de la variable template, los procesa e inserta en el html a la altura de la class indicada
	$('.posts').prepend(template);

		#efecto de aparecer y alinear
		$('.posts').prepend($(template).fadeIn(function(){
				$(this).css('display','inline-block')
			}));

	#setea a vacio los campos input
	$('.input[type=text]').val('');

	#ocultar el slide
	$('.form').slideUp();

	#ejecuta a cada uno de los elementos una funcion que siempre recibe 2 parametro (indice)
	$('.sizer').each(function(i,var){});


CLOSURES
	
	FUNCIONES
	#junto a los objetos son los actores principales

	#cada vez que se crea una funcion se crea un nuevo contexto "ageno" al contexto global (window)

	#las funciones tienen acceso a los datos de su propio contexto y de todos los contextos que la contienen, pero no al contexto de las funciones que alojan dentro de ella

	CLOSURES
		una funcion que es evaluada a traves del contexto lexico en la que fue definida, junto a las variables libres asociadas

		#crear una puerta entre el contexto global y el contexto de una funcion

		#es la declaracion de una funcion mas el contexto en la que fue declarada

		#uso:
			fabrica funciones
			ocultar codigo
			definir modulos
			extender el lenguaje

		#FABRICAR UNA FUNCION
			#ejemplo
			function resizer(pixeles){
				return function(){
					document.body.style.fontSize = pixeles+'px';
				}
			}

			var size14 = resizer(14);

			la variable size14 contiene la funcion:
			function(){document.body.style.fontSize = pixeles+'px';}

		#OCULTAR (PRIVACIDAD) CODIGO
			var contador = (function(){
				var _contador = 0 /*interfaz privada*/

				/*interfaz publica*/
				return {
					incrementar : function(){
						_contador++;
					},decrementar : function(){
						_contador--;
					}, ver : function(){
						console.log(_contador);
					}
 				}
			})();
