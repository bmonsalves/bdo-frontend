PRACTICAS

	# filosofia movil first y responsive desing
	# html5 boilerplate mejores practicas

	# en "css orientado a objetos", reservar los id para javascript en css utilizar clases para tratar a cada elemento como un objeto

	# cuando la imagen no es parte del contenido cargar las imagenes por css

	# mantener solo un header, un nav y un h1 por pagina

	#utilizar margenes en relacional tamaño de la fuente (em)

HTML----------
HEAD
	dependencia al responsive design
	<meta name="viewport" content="width=device-width, initial-scale=1">

	todo el css igual en todos los navegadores
	(no utilizar reset en css)
	<link rel="stylesheet" href="css/normalize.css"> 

	libreria js para hacer que todo lo de html5 funcione bien en navegadores
	<script src="js/vendor/modernizr-2.6.2.min.js"></script>

BODY
	todo el javascript antes de cerrar la etiqueta

ESTRUCTURA

	header
	nav -> botones de navegacion
	section
	article -> ultimo item dentro de un sistema semantico
	footer
	figure -> imagenes

CSS
	#margin <arriba> <derecha> <abajo> <izq>

	#padding <arriba/abajo> <lados>

	#text-shadow <desplazamiento en X> <desplazamiento en y> <difumina> <color sombra>

	#para los margenes considerar los pixeles de los divs anteriores sobre todo cuando hay un div flotando a la izq. ej. si tengo un div:float left; width 60px; para poner un margen al div contiguo es necesario sumar el width + el margen deseado  

	#border-radius 1em: bordes redondeados
	#border-radius 50%: imagen circular

	#DISPLAY:
		inline; si se ubica en un texto se posiciona normal dentro e el, se pueden mover dentro del div

		block; ocupa el maximo ancho del div, obliga a los objetos hacer un salto de linea, no pueden tener margin ni padding
		(transforma en cajas los objetos)

		inline-block; convierte cualquier caja u objeto con margin, padding pero no elimina las cosas de la derecha o que estan al lado de el

		#FLOAT: left; o right;
			(rompe las caracteristicas de campo de fuerza qe tienen los objetos, permite que el resto de los objetos rodee a otro.)

		#POSITION:
			(todos los objetos tienen por defecto una posicion static)

			relative; adquiere la capacidad de utilizar top left button y right, pero aun sigue empujando al resto de los objetos (mantiene su campo de fuerza)

			absolute; obtiene las mismas caracteristicas que relative, pero rompe su campo de fuerza y ubica su punto 0.0 en el body excepto si la caja a la que se le aplica esta dentro de un POSITION
			(busca el contenedor mas cercano que tenga relative y a partir de ese busca su punto 0.0)

		#Z-INDEX 0..n
			(permite crear capaz y superponerlas, requiere position: absolute o relative en las capaz superiores, 0 es la capa mas al interior)

		#OVERFLOW: hidden;  
				(obliga al objeto a esconder lo que se sale, recalcula el alto incluyendo a los objetos que se salen)

		#OVERFLOW-X auto;(horizontal)
				(ajusta el objeto y crea un scroll si es mas grande que el ancho de la pagina)

		#WHITE_SPACE nowrap
			(mata la propiedad de salto de linea de los textos contenidos en un objeto)

		#BOX-SHADOW <x> <y> <difuminacion> <color>
			sombra para las cajas
APUNTE

	#instalar node.js y stylus

	#compilar stylus
	stylus prueba1.styl -c -w

	#los objetos que contienen texto (p,hn,ul-li) siempre tienen un margenes por defecto

	# por defecto recomendado para la web
	font-size 16px

	# para utilizar un padding qe dependa del tamaño de la fuente por defecto se utiliza como medida "em"

	#retina necesita el doble de pixeles para mostrar una imagen de buena calidad (prop 4:1) si tenemos una imagen de 100x100px hay qe exportarla a 200x200px,.png no tiene problemas de peso al redimencionar la imagen,
	en el caso de los jpg, uno de 100x100 a 90% de calidad pesa mas que uno de 200x200 a 50% y dentro de esos parametros no debiera producir problemas

	# en imagenes utilizar pixeles absolutos, para textos y otras cosas utilizar tamaños adaptables

	# se pueden agregar varias clases a un tag <div class="logo left">

	# utilizar display inline-block en los ul-li para mostrarlos de forma horizontal



